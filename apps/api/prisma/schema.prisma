// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  superAdmin
  storeAdmin
}

model User {
  id             String        @id @default(cuid())
  googleId       String?
  name           String?
  email          String        @unique
  password       String?
  profilePicture Bytes?        @db.LongBlob
  isVerified     Boolean?      @default(false)
  role           Role?
  referralCode   String?       @unique
  referredCode   String?
  latitude       Float?
  longitude      Float?
  Address        Address[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  VoucherUser    VoucherUser[]
  Store          Store[]
  Cart           Cart[]
  Order          Order[]

  @@index([name, email])
  @@map("users")
}

model Address {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  address    String
  postalCode Int
  city       String
  type       String
  province   String
  latitude   Float?
  longitude  Float?
  isChosen   Boolean  @default(false)
  Order      Order[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("addresses")
}

model City {
  id         Int    @id @default(autoincrement())
  province   String
  type       String
  cityName   String
  postalCode String

  @@map("cities")
}

model Store {
  id              String            @id @default(cuid())
  name            String
  user            User              @relation(fields: [userId], references: [id])
  userId          String
  isChosen        Boolean           @default(false)
  address         String
  city            String
  type            String
  province        String
  postalCode      Int
  latitude        Float
  longitude       Float
  isDeleted       Boolean           @default(false)
  Stock           Stock[]
  Cart            Cart[]
  OrderItem       OrderItem[]
  ProductDiscount ProductDiscount[]
  Voucher         Voucher[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@map("store")
}

model Product {
  id              String            @id @default(cuid())
  name            String
  description     String            @db.Text
  weight          Float
  price           Float
  category        Category?         @relation(fields: [categoryId], references: [id])
  categoryId      String?
  isDeleted       Boolean           @default(false)
  ProductImage    ProductImage[]
  Stock           Stock[]
  Cart            Cart[]
  OrderItem       OrderItem[]
  ProductDiscount ProductDiscount[]
  Voucher         Voucher[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@map("products")
}

model Category {
  id        String    @id @default(cuid())
  name      String
  image     Bytes?    @db.LongBlob
  isDeleted Boolean   @default(false)
  Product   Product[]

  @@map("categories")
}

model ProductImage {
  id        String   @id @default(cuid())
  image     Bytes    @db.LongBlob
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_images")
}

model Stock {
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  store     Store    @relation(fields: [storeId], references: [id])
  storeId   String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Cart      Cart[]

  @@id([productId, storeId])
  @@map("stocks")
}

model Cart {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  store     Store    @relation(fields: [storeId], references: [id])
  storeId   String
  quantity  Int
  stock     Stock    @relation(fields: [productId, storeId], references: [productId, storeId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("carts")
}

enum Status {
  waitingPayment
  waitingConfirmation
  processed
  shipped
  confirmed
  cancelled
}

enum Paid {
  manual
  gateway
}

model Order {
  id                String      @id @default(cuid())
  invoice           String      @unique
  user              User        @relation(fields: [userId], references: [id])
  userId            String
  totalPrice        Float
  address           Address     @relation(fields: [addressId], references: [id])
  addressId         String
  shippingCost      Float?
  shippedAt         DateTime?
  paidType          Paid
  snap_token        String?
  snap_redirect_url String?
  payment_method    String?
  paymentProof      Bytes?      @db.LongBlob
  paidAt            DateTime?
  status            Status
  OrderItem         OrderItem[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  store     Store    @relation(fields: [storeId], references: [id])
  storeId   String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_items")
}

enum Type {
  percentage
  nominal
}

enum CategoryDisc {
  buyGet
  discount
}

enum CategoryVoucher {
  shippingCost
  totalPurchase
  product
}

model ProductDiscount {
  id        String   @id @default(cuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  store     Store    @relation(fields: [storeId], references: [id])
  storeId   String
  type      Type
  value     Float
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_discounts")
}

model Voucher {
  id               String          @id @default(cuid())
  voucherCode      String
  product          Product         @relation(fields: [productId], references: [id])
  productId        String
  store            Store           @relation(fields: [storeId], references: [id])
  storeId          String
  category         CategoryVoucher
  type             Type
  value            Float
  maxDiscount      Float?
  minTransaction   Int?
  minTotalPurchase Float?
  startDate        DateTime
  endDate          DateTime
  VoucherUser      VoucherUser[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@map("vouchers")
}

model VoucherUser {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  voucher   Voucher  @relation(fields: [voucherId], references: [id])
  voucherId String
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("voucher_users")
}
